package com.epam.project;

import com.epam.project.dao.*;
import com.epam.project.entities.*;
import com.epam.project.exceptions.DataBaseNotSupportedException;
import com.epam.project.exceptions.IncorrectPropertyException;

import java.sql.Timestamp;
import java.util.List;

public class Application {

    private static IProductDao productDao = new ProductDaoImplementation();
    private static List<Product> products;
    private static IUserDao userDao = new UserDaoImplementation();
    private static List<User> users;
    private static IOrderDao orderDao;
    private static List<Order> orders;

    public Application() throws DataBaseNotSupportedException, IncorrectPropertyException {
        DaoFactory daoFactory = DaoFactory.getDaoFactory(DataBaseSelector.MY_SQL);
        productDao = daoFactory.getProductDao();
        userDao = daoFactory.getUserDao();
        orderDao = daoFactory.getOrderDao();
    }

    public static void main(String... args) throws Exception {
        Application application = new Application();
        //application.testProductDao();
        //application.testUserDao();
        //System.out.println(order);
        application.testOrderDao();
    }

    public void testUserDao() {
        User user = new User("Somebody", "else");
            user.setUserRole(UserRole.ADMIN);
            user.setNotes("Added by Application runner");
        //System.out.println(userDao.addUserToDB(user));
        //System.out.println(userDao.updateUserInDB(user));
        //System.out.println(userDao.deleteUserFromDB(user));
        System.out.println("All users\n");
        users = userDao.findAllUsersInDB();
        System.out.println(users);
        System.out.println("\nUser by id = 5");
        System.out.println(userDao.findUserById(5));
        System.out.println("\nUser by name = Yaroslav");
        System.out.println(userDao.findUserByName("Yaroslav"));
    }

    public void testProductDao() {
        Product product = new Product().addCode("C002A").addAvailable(true)
                .addNameEn("Royal Canin Kitten 0 - 13").addNameRu("Royal Canin Kitten 0 - 13")
                .addDescriptionEn("Royal Canin dry feed for kittens 0 - 13 month")
                .addDescriptionRu("Корм Роял Канин для котят в возрасте 0 - 13 месяцeв")
                .addCost(247.50).addQuantity(50.0)
                .addUomEn("kg").addUomRu("кг")
                .addNotesEn("Added by Application runner").addNotesRu("Сгенерировано классом Application");
        //System.out.println(productDao.updateProductInDB(product));
        //productDao.updateProductInDB(product);
        //System.out.println(productDao.deleteProductFromDB("C002A"));
        System.out.println("All products\n");
        products = productDao.findAllProductsInDB();
        System.out.println(products);
        System.out.println("\nProduct by id = 5");
        System.out.println(productDao.findProductById(5));
        System.out.println("\nProduct by code = D005");
        System.out.println(productDao.findProductByCode("D005"));
    }

    public void testOrderDao(){
        Order order = createTestOrder(4, 6, "D001", "C001");
        System.out.println(orderDao.addOrderToDB(order));
        System.out.println("All orders\n");
        orders = orderDao.findAllOrders();
        System.out.println(orders);
        /*System.out.println("\nOrders by User id = 1");
        System.out.println(orderDao.findAllOrdersByUser(1));
        System.out.println("\nOrders by id = 2");
        System.out.println(orderDao.findOrderById(3));*/
    }

    public Order createTestOrder(Integer orderNum, Integer userId, String... productCodes) {
        Order order = new Order();
        order.setOrderId(orderNum);
        order.setUserId(userId);
        order.setUserName(userDao.findUserById(userId).getName());
        order.setOrderStatus(OrderStatus.CREATED);
        order.setOrderDate(new Timestamp(System.currentTimeMillis()));
        order.setNotes("Generated by Application runner");
        for (String code : productCodes)
            order.addProduct(productDao.findProductByCode(code), 30.0);
        return order;
    }
}
